use std::str::FromStr;
use crate::ast;

grammar;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Dot<T>: Vec<T> = {
    <v:(<T> ".")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

pub Root: Vec<ast::Statement> = {
   Statement* => <>
}

pub IdentifierStr: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*(\.[a-zA-Z_][a-zA-Z_0-9]*)*" => <>.to_owned()
}
pub NumberLiteralStr: String = {
    r"[0-9]+" => <>.to_owned()
}
pub StringLiteralStr: String = {
    r#""[^"]*""# => <>.to_owned(),
    r#"'[^']*'"# => <>.to_owned()
}




pub Identifier: ast::ExpressionBase = {
    IdentifierStr => ast::ExpressionBase::Identifier(<>)
}
pub NumberLiteral: ast::ExpressionBase = {
    NumberLiteralStr => ast::ExpressionBase::NumberLiteral(<>)
}
pub StringLiteral: ast::ExpressionBase = {
    StringLiteralStr => ast::ExpressionBase::StringLiteral(<>)
}




// Statements
pub Statement: ast::Statement = {
    ExprStatement,
    VariableDefinition,
    SectionDefinition,
    IncludeStatement,
    ConditionalStatement
}
pub ExprStatement: ast::Statement = {
    <e:Expression> ";" => ast::Statement::ExprStatement(e)
}
pub VariableDefinition: ast::Statement  = {
    "let" <i:Identifier> "=" <e:Expression> ";" => ast::Statement::VariableDefinition(i, e),
}
pub SectionDefinition: ast::Statement  = {
    "let" <i:Identifier> <p:SectionParams> "=" "{" <s:Statement*> "}" => ast::Statement::SectionDefinition(i,Some(p),s),
    "let" <i:Identifier> "=" "{" <s:Statement*> "}" => ast::Statement::SectionDefinition(i,None,s)
}
pub SectionParams: Vec<ast::ExpressionBase> = {
    ":" <a:Comma<Identifier>> => a
}
pub IncludeStatement: ast::Statement = {
    "include" <i:Dot<Identifier>> ";" => ast::Statement::Include(i, None),
    "include" <i:Dot<Identifier>> "as" <a:Identifier> ";" => ast::Statement::Include(i, Some(a)),
}
pub ConditionalStatement: ast::Statement = {
    "if" "("<c:Expression>")" "{"<s:Statement*>"}" => ast::Statement::Conditional(c, s, None),
    "if" "("<c:Expression>")" "{"<s:Statement*>"}" "else" "{"<se:Statement*>"}" => ast::Statement::Conditional(c, s, Some(se)),
}





// Expressions
pub ExpressionBase: ast::ExpressionBase = {
    Identifier,
    NumberLiteral,
    StringLiteral,
    "(" <e:Expression> ")" => ast::ExpressionBase::SubExpression(Box::new(e))
}
pub Expression: ast::Expression = {
    AssignmentOperation
}
pub AssignmentOperation: ast::Expression = {
    <e1:AssignmentOperation> "=" <e2:ComparisonOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Assign, Box::new(e1), Box::new(e2)),
    ComparisonOperation
}
pub ComparisonOperation: ast::Expression = {
    <e1:ComparisonOperation> "==" <e2:AdditiveOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Equals, Box::new(e1), Box::new(e2)),
    <e1:ComparisonOperation> "!=" <e2:AdditiveOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::NotEquals, Box::new(e1), Box::new(e2)),
    AdditiveOperation
}
pub AdditiveOperation: ast::Expression = {
    <e1:AdditiveOperation> "+" <e2:MultiplicativeOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Add, Box::new(e1), Box::new(e2)),
    <e1:AdditiveOperation> "-" <e2:MultiplicativeOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Sub, Box::new(e1), Box::new(e2)),
    MultiplicativeOperation
}

pub MultiplicativeOperation: ast::Expression = {
    <e1:MultiplicativeOperation> "*" <e2:PostfixOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Mult, Box::new(e1), Box::new(e2)),
    <e1:MultiplicativeOperation> "/" <e2:PostfixOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Div, Box::new(e1), Box::new(e2)),
    PostfixOperation
}

pub PostfixOperation: ast::Expression = {
    <i:Identifier> "(" <a:Comma<Expression>> ")" => ast::Expression::FunctionCall(i, a),
    <i:Identifier> "[" <e:Expression> "]" => ast::Expression::VarIndexing(i, Box::new(e)),
    <i:Identifier> "++" => ast::Expression::PostfixOperation(ast::PostfixOp::Incr, i),
    <i:Identifier> "--" => ast::Expression::PostfixOperation(ast::PostfixOp::Decr, i),
    ExpressionBase => ast::Expression::ExpressionBase(<>),
}