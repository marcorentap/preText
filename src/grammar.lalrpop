use std::str::FromStr;
use crate::ast;

grammar;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Root: Vec<ast::Statement> = {
   Statement* => <>
}

pub IdentifierStr: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*(\.[a-zA-Z_][a-zA-Z_0-9]*)*" => <>.to_owned()
}
pub NumberLiteralStr: String = {
    r"[0-9]+" => <>.to_owned()
}
pub StringLiteralStr: String = {
    r#""[^"]*""# => <>.to_owned(),
    r#"'[^']*'"# => <>.to_owned()
}




pub Identifier: ast::ExpressionBase = {
    IdentifierStr => ast::ExpressionBase::Identifier(<>)
}
pub Number: ast::ExpressionBase = {
    NumberLiteralStr => ast::ExpressionBase::NumberLiteral(<>)
}




// Statements
pub Statement: ast::Statement = {
    ExprStatement,
    VariableDefinition,
}
pub ExprStatement: ast::Statement = {
    Expression => ast::Statement::ExprStatement(<>)
}
pub VariableDefinition: ast::Statement  = {
    "let" <i:IdentifierStr> "=" <e:Expression> ";" => ast::Statement::VariableDefinition(i, e),
}




// Expressions
pub Expression: ast::Expression = {
    AdditiveOperation
}
pub ExpressionBase: ast::ExpressionBase = {
    Identifier,
    Number,
    "(" <e:Expression> ")" => ast::ExpressionBase::SubExpression(Box::new(e))
}
AdditiveOperation: ast::Expression = {
    <e1:AdditiveOperation> "+" <e2:MultiplicativeOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Add, Box::new(e1), Box::new(e2)),
    <e1:AdditiveOperation> "-" <e2:MultiplicativeOperation> => ast::Expression::BinaryOperation(ast::BinaryOp::Sub, Box::new(e1), Box::new(e2)),
    MultiplicativeOperation
}

pub MultiplicativeOperation: ast::Expression = {
    <e1:MultiplicativeOperation> "*" <e2:ExpressionBase> => ast::Expression::BinaryOperation(ast::BinaryOp::Mult, Box::new(e1), Box::new(ast::Expression::ExpressionBase(e2))),
    <e1:MultiplicativeOperation> "/" <e2:ExpressionBase> => ast::Expression::BinaryOperation(ast::BinaryOp::Div, Box::new(e1), Box::new(ast::Expression::ExpressionBase(e2))),
    ExpressionBase => ast::Expression::ExpressionBase(<>),
}
